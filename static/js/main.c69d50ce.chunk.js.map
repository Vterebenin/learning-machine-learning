{"version":3,"sources":["loader/index.js","webCamAnylizer/index.js","App.js","serviceWorker.js","index.js"],"names":["Index","id","Component","props","infoTexts","isTraining","training","recordSamples","classes","testPrediction","numberOfSubjects","handleMouseDown","bind","handleMouseUp","startPredictions","animate","state","loading","info","this","setState","loadClassifierAndModel","then","setup","prevProps","prevState","snapshot","video","document","getElementById","knn","knnClassifier","mobilenet","mobilenetModule","console","log","start","i","push","timer","stop","requestAnimationFrame","cancelAnimationFrame","image","tf","fromPixels","infer","logits","addExample","numClasses","getNumClasses","predictClass","res","confidences","exampleCount","getClassExampleCount","dispose","Grid","container","alignItems","item","md","xs","Button","className","variant","onMouseDown","onMouseUp","width","height","onClick","React","App","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c69d50ce.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport './index.css'\r\n\r\nclass Index extends Component {\r\n  render() {\r\n    return (\r\n      <>\r\n        <h3>Загружаем обучаемую модель</h3>\r\n        <div id=\"loader\">\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Index;","import React from 'react';\r\nimport WebCam from 'react-webcam'\r\nimport { Button, Grid } from '@material-ui/core'\r\nimport * as tf from '@tensorflow/tfjs';\r\nimport * as knnClassifier from '@tensorflow-models/knn-classifier';\r\nimport * as mobilenet from '@tensorflow-models/mobilenet'\r\nimport Loader from '../loader'\r\nimport './index.css'\r\n\r\nexport default class Index extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.infoTexts = [];\r\n    this.isTraining = true\r\n    this.training = -1; // -1 используем если не тренируем\r\n    this.recordSamples = false;\r\n    this.classes = [\"Left\", \"Right\"];\r\n    this.testPrediction = false;\r\n    this.training = true;\r\n    this.numberOfSubjects = 2;\r\n\r\n    this.handleMouseDown = this.handleMouseDown.bind(this)\r\n    this.handleMouseUp = this.handleMouseUp.bind(this)\r\n    this.startPredictions = this.startPredictions.bind(this)\r\n    this.animate = this.animate.bind(this)\r\n    this.state = {\r\n      loading: false,\r\n      info: []\r\n    }\r\n  }\r\n\r\n  startPredictions() {\r\n    this.testPrediction = true\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.setState({\r\n      loading: true\r\n    })\r\n    this.loadClassifierAndModel().then(() => (\r\n      this.setState({\r\n        loading: false\r\n      })\r\n    ))\r\n    this.setup();\r\n  }\r\n  componentDidUpdate(prevProps, prevState, snapshot) {\r\n    this.video = document.getElementById('webCam')\r\n  }\r\n\r\n  async loadClassifierAndModel() {\r\n    this.knn = knnClassifier.create();\r\n    this.mobilenetModule = await mobilenet.load();\r\n\r\n    console.log(this.video)\r\n    console.log('model loaded')\r\n    this.start();\r\n  }\r\n\r\n  handleMouseDown(i) {\r\n    this.training = i;\r\n    this.recordSamples = true;\r\n  }\r\n\r\n  handleMouseUp() {\r\n    this.training = -1\r\n  }\r\n\r\n  setup() {\r\n    for (let i = 0; i < this.numberOfSubjects; i++) {\r\n      const infoText = \"Не добавлено примеров\";\r\n      this.infoTexts.push(infoText);\r\n    }\r\n\r\n    this.setState({\r\n      info: this.infoTexts\r\n    })\r\n  }\r\n\r\n  start() {\r\n    if (this.timer) {\r\n      this.stop();\r\n    }\r\n    this.timer = requestAnimationFrame(this.animate);\r\n  }\r\n\r\n  stop() {\r\n    cancelAnimationFrame(this.timer);\r\n  }\r\n\r\n  async animate() {\r\n    if (this.recordSamples) {\r\n      // Get image data from video element\r\n      const image = tf.browser.fromPixels(this.video);\r\n\r\n      let logits;\r\n      // 'conv_preds' is the logits activation of MobileNet.\r\n      const infer = () => this.mobilenetModule.infer(image, \"conv_preds\");\r\n\r\n      // Train class if one of the buttons is held down\r\n      if (this.training !== -1) {\r\n        logits = infer();\r\n\r\n        // Add current image to classifier\r\n        this.knn.addExample(logits, this.training);\r\n      }\r\n\r\n      const numClasses = this.knn.getNumClasses();\r\n\r\n      if (this.testPrediction) {\r\n        this.isTraining = false;\r\n        if (numClasses > 0) {\r\n          // Если были добавлены классы, то запускаем предположение\r\n          logits = infer();\r\n          // Значение K в алгоритме KNN важно, потому что оно представляет количество\r\n          // экземпляров, которые мы учитываем при определении класса нашего ввода.\r\n          // В этом случае значение 10 означает, что при прогнозировании метки\r\n          // для некоторых новых данных мы будем смотреть на 10 ближайших\r\n          // соседей из обучающих данных, чтобы определить, как классифицировать новый вход.\r\n          const res = await this.knn.predictClass(logits, 10);\r\n          console.log(res.confidences)\r\n\r\n          for (let i = 0; i < this.numberOfSubjects; i++) {\r\n            // Количество примеров для каждого класса\r\n            const exampleCount = this.knn.getClassExampleCount();\r\n\r\n            if (exampleCount[i] > 0) {\r\n              this.infoTexts[i] = ` ${\r\n                exampleCount[i]\r\n              } примеров - ${res.confidences[i] * 100}%`;\r\n              this.setState({\r\n                info: this.infoTexts\r\n              })\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      if (this.isTraining) {\r\n        // Количество примеров для каждого класса\r\n        const exampleCount = this.knn.getClassExampleCount();\r\n\r\n        for (let i = 0; i < this.numberOfSubjects; i++) {\r\n          if (exampleCount[i] > 0) {\r\n            this.infoTexts[i] = ` добавлено ${exampleCount[i]} примеров`;\r\n            this.setState({\r\n              info: this.infoTexts\r\n            })\r\n          }\r\n        }\r\n      }\r\n\r\n      // В завершении удаляем обработанное изображение\r\n      image.dispose();\r\n      if (logits != null) {\r\n        logits.dispose();\r\n      }\r\n    }\r\n    this.timer = requestAnimationFrame(this.animate);\r\n  }\r\n\r\n  render() {\r\n\r\n    return (\r\n\r\n      <Grid container alignItems={'center'}>\r\n\r\n        {this.state.loading ? (\r\n          <Grid item md={12}>\r\n            <Loader/>\r\n          </Grid>\r\n        ) : (\r\n          <>\r\n            <Grid item xs={12} md={4}>\r\n              <Button\r\n                className=\"button\"\r\n                variant=\"contained\"\r\n                onMouseDown={() => this.handleMouseDown(0)}\r\n                onMouseUp={() =>this.handleMouseUp()}\r\n              >\r\n                Положение слева\r\n              </Button>\r\n              <p>\r\n                {this.infoTexts[0]}\r\n              </p>\r\n            </Grid>\r\n            <Grid item xs={12} md={4}>\r\n              <WebCam id={'webCam'} width={227} height={227} />\r\n            </Grid>\r\n            <Grid item xs={12} md={4}>\r\n              <Button\r\n                className=\"button\"\r\n                variant=\"contained\"\r\n                onMouseDown={() => this.handleMouseDown(1)}\r\n                onMouseUp={() =>this.handleMouseUp()}\r\n              >\r\n                Положение справа\r\n              </Button>\r\n              <p>\r\n                {this.infoTexts[1]}\r\n              </p>\r\n            </Grid>\r\n            <Grid item md={12}>\r\n              <Button onClick={this.startPredictions} variant=\"contained\">Предсказать!</Button>\r\n            </Grid>\r\n          </>\r\n        )}\r\n      </Grid>\r\n\r\n    );\r\n  }\r\n}\r\n\r\n","import React from 'react';\nimport './App.css';\nimport WebCamAnylizer from './webCamAnylizer'\n\nclass App extends React.Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"App-header\">\n          <h3>\n           Ваше собственное тестирование машинного обучения!\n          </h3>\n          <h4>Как это сделать?</h4>\n          <ol className=\"tutorial\">\n            <li>Натренируйте нейросеть с уколоном тела/головы влево и вправо</li>\n            <li>Проверьте на работоспособность!</li>\n          </ol>\n          <WebCamAnylizer/>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}